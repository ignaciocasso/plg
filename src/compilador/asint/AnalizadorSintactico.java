
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.asint;

import java_cup.runtime.*;
import compilador.alex.AnalizadorLexico;
import compilador.alex.UnidadLexica;
import compilador.errores.GestionErrores;
import compilador.Nodos;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import compilador.nodos.NodoPrograma;
import compilador.nodos.expresiones.*;
import compilador.nodos.sentencias.NodoSentencia;
import compilador.nodos.sentencias.definiciones.*;
import compilador.nodos.tipos.*;
import compilador.nodos.variables.*;
import compilador.nodos.sentencias.NodoCall;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\013\005\000\002\005\005\000\002\005\007\000\002\005" +
    "\010\000\002\006\012\000\002\007\015\000\002\022\003" +
    "\000\002\022\002\000\002\023\005\000\002\023\003\000" +
    "\002\024\004\000\002\011\012\000\002\011\016\000\002" +
    "\012\012\000\002\010\006\000\002\014\006\000\002\025" +
    "\003\000\002\025\002\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\015\003\000\002\015\006\000" +
    "\002\015\005\000\002\015\004\000\002\016\003\000\002" +
    "\016\003\000\002\021\003\000\002\021\006\000\002\021" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\030\002\ufffe\004\ufffe\007\ufffe\011\ufffe\013" +
    "\ufffe\014\ufffe\040\ufffe\042\ufffe\047\ufffe\050\ufffe\051\ufffe" +
    "\001\002\000\004\002\214\001\002\000\030\002\001\004" +
    "\017\007\012\011\032\013\026\014\016\040\031\042\006" +
    "\047\007\050\030\051\025\001\002\000\022\014\016\016" +
    "\056\024\065\036\061\043\207\044\057\045\062\046\063" +
    "\001\002\000\004\014\uffdc\001\002\000\034\002\ufff8\004" +
    "\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002\000" +
    "\010\033\204\042\125\051\126\001\002\000\004\036\175" +
    "\001\002\000\004\014\uffe0\001\002\000\004\014\157\001" +
    "\002\000\034\002\uffff\004\uffff\007\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\040\uffff\041\uffff\042\uffff\047\uffff\050" +
    "\uffff\051\uffff\001\002\000\054\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\022\uffda\023\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\147" +
    "\037\uffda\042\uffda\043\uffda\051\uffda\052\uffda\001\002\000" +
    "\004\036\134\001\002\000\004\035\133\001\002\000\034" +
    "\002\ufff9\004\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\001\002\000\034\002\ufff7\004\ufff7\007\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\040\ufff7\041\ufff7\042\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\001\002\000\034\002\ufffa\004\ufffa\007" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000\034\002" +
    "\ufffd\004\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\047\ufffd\050\ufffd\051\ufffd\001" +
    "\002\000\012\042\006\047\007\050\030\051\025\001\002" +
    "\000\012\042\006\047\007\050\030\051\025\001\002\000" +
    "\034\002\ufffc\004\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\040\ufffc\041\ufffc\042\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\001\002\000\004\014\uffdb\001\002\000\030\004\ufffe" +
    "\007\ufffe\011\ufffe\013\ufffe\014\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000\004\014\034" +
    "\001\002\000\034\002\ufffb\004\ufffb\007\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\040\ufffb\041\ufffb\042\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\001\002\000\004\036\035\001\002\000" +
    "\014\037\uffee\042\006\047\007\050\030\051\025\001\002" +
    "\000\004\037\045\001\002\000\006\034\uffec\037\uffec\001" +
    "\002\000\006\034\043\037\uffef\001\002\000\004\014\042" +
    "\001\002\000\006\034\uffeb\037\uffeb\001\002\000\012\042" +
    "\006\047\007\050\030\051\025\001\002\000\006\034\uffed" +
    "\037\uffed\001\002\000\004\040\046\001\002\000\030\004" +
    "\ufffe\007\ufffe\011\ufffe\013\ufffe\014\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000\030\004" +
    "\017\007\012\011\032\013\026\014\016\040\031\041\050" +
    "\042\006\047\007\050\030\051\025\001\002\000\034\002" +
    "\ufff1\004\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\047\ufff1\050\ufff1\051\ufff1\001" +
    "\002\000\030\004\017\007\012\011\032\013\026\014\016" +
    "\040\031\041\052\042\006\047\007\050\030\051\025\001" +
    "\002\000\034\002\ufff5\004\ufff5\007\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\040\ufff5\041\ufff5\042\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\001\002\000\004\014\054\001\002\000\004" +
    "\033\055\001\002\000\020\014\016\016\056\024\065\036" +
    "\061\044\057\045\062\046\063\001\002\000\020\014\016" +
    "\016\056\024\065\036\061\044\057\045\062\046\063\001" +
    "\002\000\042\015\uffd6\016\uffd6\017\uffd6\020\uffd6\022\uffd6" +
    "\023\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\034\uffd6\035\uffd6\037\uffd6\043\uffd6\001\002\000\050" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7" +
    "\035\uffd7\037\uffd7\042\125\043\uffd7\051\126\052\124\001" +
    "\002\000\020\014\016\016\056\024\065\036\061\044\057" +
    "\045\062\046\063\001\002\000\042\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\037\uffd5\043" +
    "\uffd5\001\002\000\042\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\022\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\037\uffd4\043\uffd4\001\002" +
    "\000\042\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3\023" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\034\uffc3\035\uffc3\037\uffc3\043\uffc3\001\002\000\020\014" +
    "\016\016\056\024\065\036\061\044\057\045\062\046\063" +
    "\001\002\000\042\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022" +
    "\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\034\uffd3\035\uffd3\037\uffd3\043\uffd3\001\002\000" +
    "\034\015\076\016\072\017\074\020\101\022\070\023\104" +
    "\025\071\026\075\027\100\030\073\031\103\032\077\035" +
    "\102\001\002\000\020\014\016\016\056\024\065\036\061" +
    "\044\057\045\062\046\063\001\002\000\020\014\016\016" +
    "\056\024\065\036\061\044\057\045\062\046\063\001\002" +
    "\000\020\014\016\016\056\024\065\036\061\044\057\045" +
    "\062\046\063\001\002\000\020\014\016\016\056\024\065" +
    "\036\061\044\057\045\062\046\063\001\002\000\020\014" +
    "\016\016\056\024\065\036\061\044\057\045\062\046\063" +
    "\001\002\000\020\014\016\016\056\024\065\036\061\044" +
    "\057\045\062\046\063\001\002\000\020\014\016\016\056" +
    "\024\065\036\061\044\057\045\062\046\063\001\002\000" +
    "\020\014\016\016\056\024\065\036\061\044\057\045\062" +
    "\046\063\001\002\000\020\014\016\016\056\024\065\036" +
    "\061\044\057\045\062\046\063\001\002\000\020\014\016" +
    "\016\056\024\065\036\061\044\057\045\062\046\063\001" +
    "\002\000\034\002\ufff2\004\ufff2\007\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\040\ufff2\041\ufff2\042\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\001\002\000\020\014\016\016\056\024\065" +
    "\036\061\044\057\045\062\046\063\001\002\000\020\014" +
    "\016\016\056\024\065\036\061\044\057\045\062\046\063" +
    "\001\002\000\042\015\uffcb\016\uffcb\017\074\020\101\022" +
    "\070\023\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\034\uffcb\035\uffcb\037\uffcb\043\uffcb\001\002\000" +
    "\026\015\076\016\072\017\074\020\101\022\070\023\104" +
    "\034\uffc5\035\uffc5\037\uffc5\043\uffc5\001\002\000\042\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\034\uffce\035" +
    "\uffce\037\uffce\043\uffce\001\002\000\026\015\076\016\072" +
    "\017\074\020\101\022\070\023\104\034\uffc7\035\uffc7\037" +
    "\uffc7\043\uffc7\001\002\000\026\015\076\016\072\017\074" +
    "\020\101\022\070\023\104\034\uffc4\035\uffc4\037\uffc4\043" +
    "\uffc4\001\002\000\042\015\uffd1\016\uffd1\017\074\020\101" +
    "\022\070\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\034\uffd1\035\uffd1\037\uffd1\043\uffd1\001\002" +
    "\000\026\015\076\016\072\017\074\020\101\022\070\023" +
    "\104\034\uffc8\035\uffc8\037\uffc8\043\uffc8\001\002\000\042" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\034\uffcf" +
    "\035\uffcf\037\uffcf\043\uffcf\001\002\000\026\015\076\016" +
    "\072\017\074\020\101\022\070\023\104\034\uffc6\035\uffc6" +
    "\037\uffc6\043\uffc6\001\002\000\042\015\uffd0\016\uffd0\017" +
    "\074\020\101\022\070\023\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\037\uffd0\043" +
    "\uffd0\001\002\000\026\015\076\016\072\017\074\020\101" +
    "\022\070\023\104\034\uffc9\035\uffc9\037\uffc9\043\uffc9\001" +
    "\002\000\042\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc" +
    "\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\034\uffcc\035\uffcc\037\uffcc\043\uffcc\001\002\000\042" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\022\uffca\023\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\034\uffca" +
    "\035\uffca\037\uffca\043\uffca\001\002\000\034\015\076\016" +
    "\072\017\074\020\101\022\070\023\104\025\071\026\075" +
    "\027\100\030\073\031\103\032\077\037\123\001\002\000" +
    "\042\015\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034" +
    "\uffc2\035\uffc2\037\uffc2\043\uffc2\001\002\000\042\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2" +
    "\037\uffd2\043\uffd2\001\002\000\020\014\016\016\056\024" +
    "\065\036\061\044\057\045\062\046\063\001\002\000\052" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\023\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\037\uffd8\042\uffd8\043\uffd8\051\uffd8\052" +
    "\uffd8\001\002\000\034\015\076\016\072\017\074\020\101" +
    "\022\070\023\104\025\071\026\075\027\100\030\073\031" +
    "\103\032\077\043\130\001\002\000\052\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\042\uffd9\043\uffd9\051\uffd9\052\uffd9\001\002\000" +
    "\042\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\034" +
    "\uffcd\035\uffcd\037\uffcd\043\uffcd\001\002\000\004\014\uffdd" +
    "\001\002\000\034\002\ufff6\004\ufff6\007\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\040\ufff6\041\ufff6\042\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\001\002\000\020\014\016\016\056\024" +
    "\065\036\061\044\057\045\062\046\063\001\002\000\034" +
    "\015\076\016\072\017\074\020\101\022\070\023\104\025" +
    "\071\026\075\027\100\030\073\031\103\032\077\037\136" +
    "\001\002\000\004\005\137\001\002\000\004\040\140\001" +
    "\002\000\030\004\ufffe\007\ufffe\011\ufffe\013\ufffe\014\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\047\ufffe\050\ufffe\051\ufffe\001" +
    "\002\000\030\004\017\007\012\011\032\013\026\014\016" +
    "\040\031\041\142\042\006\047\007\050\030\051\025\001" +
    "\002\000\036\002\uffea\004\uffea\006\143\007\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\040\uffea\041\uffea\042\uffea\047" +
    "\uffea\050\uffea\051\uffea\001\002\000\004\040\144\001\002" +
    "\000\030\004\ufffe\007\ufffe\011\ufffe\013\ufffe\014\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002" +
    "\000\030\004\017\007\012\011\032\013\026\014\016\040" +
    "\031\041\146\042\006\047\007\050\030\051\025\001\002" +
    "\000\034\002\uffe9\004\uffe9\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\040\uffe9\041\uffe9\042\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\001\002\000\022\014\016\016\056\024\065\036" +
    "\061\037\uffe4\044\057\045\062\046\063\001\002\000\006" +
    "\034\155\037\uffe5\001\002\000\004\037\154\001\002\000" +
    "\006\034\uffe2\037\uffe2\001\002\000\036\015\076\016\072" +
    "\017\074\020\101\022\070\023\104\025\071\026\075\027" +
    "\100\030\073\031\103\032\077\034\uffe1\037\uffe1\001\002" +
    "\000\042\015\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\034\uffe6\035\uffe6\037\uffe6\043\uffe6\001\002\000\020\014" +
    "\016\016\056\024\065\036\061\044\057\045\062\046\063" +
    "\001\002\000\006\034\uffe3\037\uffe3\001\002\000\010\033" +
    "\161\035\162\036\160\001\002\000\014\037\uffee\042\006" +
    "\047\007\050\030\051\025\001\002\000\020\014\016\016" +
    "\056\024\065\036\061\044\057\045\062\046\063\001\002" +
    "\000\034\002\ufff4\004\ufff4\007\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\040\ufff4\041\ufff4\042\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\001\002\000\034\015\076\016\072\017\074\020" +
    "\101\022\070\023\104\025\071\026\075\027\100\030\073" +
    "\031\103\032\077\035\164\001\002\000\034\002\ufff3\004" +
    "\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002\000" +
    "\004\037\166\001\002\000\004\040\167\001\002\000\030" +
    "\004\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\040" +
    "\ufffe\042\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000\030" +
    "\004\017\007\012\011\032\012\171\013\026\014\016\040" +
    "\031\042\006\047\007\050\030\051\025\001\002\000\020" +
    "\014\016\016\056\024\065\036\061\044\057\045\062\046" +
    "\063\001\002\000\034\015\076\016\072\017\074\020\101" +
    "\022\070\023\104\025\071\026\075\027\100\030\073\031" +
    "\103\032\077\035\173\001\002\000\004\041\174\001\002" +
    "\000\034\002\ufff0\004\ufff0\007\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\040\ufff0\041\ufff0\042\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\001\002\000\020\014\016\016\056\024\065\036" +
    "\061\044\057\045\062\046\063\001\002\000\034\015\076" +
    "\016\072\017\074\020\101\022\070\023\104\025\071\026" +
    "\075\027\100\030\073\031\103\032\077\037\177\001\002" +
    "\000\004\010\200\001\002\000\004\040\201\001\002\000" +
    "\030\004\ufffe\007\ufffe\011\ufffe\013\ufffe\014\ufffe\040\ufffe" +
    "\041\ufffe\042\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000" +
    "\030\004\017\007\012\011\032\013\026\014\016\040\031" +
    "\041\203\042\006\047\007\050\030\051\025\001\002\000" +
    "\034\002\uffe8\004\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\040\uffe8\041\uffe8\042\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\001\002\000\020\014\016\016\056\024\065\036\061" +
    "\044\057\045\062\046\063\001\002\000\034\015\076\016" +
    "\072\017\074\020\101\022\070\023\104\025\071\026\075" +
    "\027\100\030\073\031\103\032\077\035\206\001\002\000" +
    "\034\002\uffe7\004\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\040\uffe7\041\uffe7\042\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\001\002\000\012\042\006\047\007\050\030\051\025" +
    "\001\002\000\034\015\076\016\072\017\074\020\101\022" +
    "\070\023\104\025\071\026\075\027\100\030\073\031\103" +
    "\032\077\043\211\001\002\000\012\042\006\047\007\050" +
    "\030\051\025\001\002\000\004\014\uffdf\001\002\000\004" +
    "\014\uffde\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\032\004\014\005\023\006\026\007\032\010\022" +
    "\011\020\012\007\013\021\014\017\015\013\016\012\021" +
    "\010\001\001\000\012\014\065\017\063\020\207\021\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\131\016\012\001" +
    "\001\000\006\015\052\016\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\040" +
    "\016\012\022\035\023\037\024\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\040\016\012\024\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\046" +
    "\001\001\000\032\004\014\005\023\006\026\007\032\010" +
    "\022\011\020\012\007\013\021\014\017\015\013\016\012" +
    "\021\010\001\001\000\002\001\001\000\032\004\014\005" +
    "\023\006\026\007\032\010\022\011\020\012\007\013\021" +
    "\014\017\015\013\016\012\021\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\065" +
    "\017\063\020\066\021\057\001\001\000\012\014\065\017" +
    "\063\020\130\021\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\065\017\063\020\121\021\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\065\017\063\020\120\021\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\065\017\063" +
    "\020\117\021\057\001\001\000\012\014\065\017\063\020" +
    "\116\021\057\001\001\000\012\014\065\017\063\020\115" +
    "\021\057\001\001\000\012\014\065\017\063\020\114\021" +
    "\057\001\001\000\012\014\065\017\063\020\113\021\057" +
    "\001\001\000\012\014\065\017\063\020\112\021\057\001" +
    "\001\000\012\014\065\017\063\020\111\021\057\001\001" +
    "\000\012\014\065\017\063\020\110\021\057\001\001\000" +
    "\012\014\065\017\063\020\107\021\057\001\001\000\012" +
    "\014\065\017\063\020\106\021\057\001\001\000\002\001" +
    "\001\000\012\014\065\017\063\020\105\021\057\001\001" +
    "\000\012\014\065\017\063\020\104\021\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\065\017\063\020\126\021\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\065\017" +
    "\063\020\134\021\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\140\001\001\000" +
    "\032\004\014\005\023\006\026\007\032\010\022\011\020" +
    "\012\007\013\021\014\017\015\013\016\012\021\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\144" +
    "\001\001\000\032\004\014\005\023\006\026\007\032\010" +
    "\022\011\020\012\007\013\021\014\017\015\013\016\012" +
    "\021\010\001\001\000\002\001\001\000\020\014\065\017" +
    "\063\020\152\021\057\025\150\026\147\027\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\065\017\063" +
    "\020\152\021\057\027\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\040\016\012\022\164\023\037" +
    "\024\036\001\001\000\012\014\065\017\063\020\162\021" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\167\001\001\000\032\004\014\005\023\006\026\007\032" +
    "\010\022\011\020\012\007\013\021\014\017\015\013\016" +
    "\012\021\010\001\001\000\012\014\065\017\063\020\171" +
    "\021\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\065\017\063\020\175\021\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\201\001\001\000\032\004\014\005\023" +
    "\006\026\007\032\010\022\011\020\012\007\013\021\014" +
    "\017\015\013\016\012\021\010\001\001\000\002\001\001" +
    "\000\012\014\065\017\063\020\204\021\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\212\016\012" +
    "\001\001\000\002\001\001\000\006\015\211\016\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
      public void syntax_error(Symbol unidadLexica) {
	   List<Integer> listaIds = this.expected_token_ids();
	   List<String> listaNames = new ArrayList<>();
	   for (int id : listaIds){
		   listaNames.add(this.symbl_name_from_id(id));
	   }
     errores.errorSintactico((UnidadLexica)unidadLexica, listaNames);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Pr ::= Ss 
            {
              NodoPrograma RESULT =null;
		Location listaSentenciasxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location listaSentenciasxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		List<NodoSentencia> listaSentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoPrograma(listaSentenciasxleft, listaSentencias); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Pr",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Pr EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Ss ::= Ss S 
            {
              List<NodoSentencia> RESULT =null;
		Location listaSentenciasxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location listaSentenciasxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		List<NodoSentencia> listaSentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location sentenciaxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location sentenciaxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia sentencia = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 listaSentencias.add(sentencia); RESULT = listaSentencias; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Ss",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Ss ::= 
            {
              List<NodoSentencia> RESULT =null;
		 RESULT = new ArrayList<NodoSentencia>(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Ss",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= Dv 
            {
              NodoSentencia RESULT =null;
		Location decVarxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location decVarxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia decVar = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = decVar; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= Dp 
            {
              NodoSentencia RESULT =null;
		Location decProcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location decProcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia decProc = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = decProc; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= Df 
            {
              NodoSentencia RESULT =null;
		Location decFuncxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location decFuncxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia decFunc = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = decFunc; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= A 
            {
              NodoSentencia RESULT =null;
		Location asignacionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location asignacionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia asignacion = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = asignacion; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= C 
            {
              NodoSentencia RESULT =null;
		Location ifStatementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location ifStatementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia ifStatement = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = ifStatement; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= W 
            {
              NodoSentencia RESULT =null;
		Location whileStatementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location whileStatementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia whileStatement = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = whileStatement; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= B 
            {
              NodoSentencia RESULT =null;
		Location bloquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location bloquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoSentencia bloque = (NodoSentencia)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = bloque; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= F PUNTOCOMA 
            {
              NodoSentencia RESULT =null;
		Location invocacionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location invocacionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoCall invocacion = (NodoCall)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = invocacion; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // B ::= AP_BLOQUE Ss CIERRE_BLOQUE 
            {
              NodoSentencia RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location listaSentenciasxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location listaSentenciasxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		List<NodoSentencia> listaSentencias = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoBloque(locxleft, listaSentencias); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("B",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Dv ::= T IDEN PUNTOCOMA 
            {
              NodoSentencia RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoDv(tipoxleft, id, tipo); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Dv",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Dv ::= T IDEN IGUAL E PUNTOCOMA 
            {
              NodoSentencia RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoDv(tipoxleft, id, tipo, exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Dv",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Dv ::= CONST T IDEN IGUAL E PUNTOCOMA 
            {
              NodoSentencia RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoDvCons(tipoxleft, id, tipo, exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Dv",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Dp ::= VOID IDEN AP_PAR ArgsD CIERRE_PAR AP_BLOQUE Ss CIERRE_BLOQUE 
            {
              NodoSentencia RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xright;
		List<NodoDv> args = (List<NodoDv>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Location cuerpoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cuerpoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		List<NodoSentencia> cuerpo = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoDecProc(locxleft, id, args, cuerpo); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Dp",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Df ::= T IDEN AP_PAR ArgsD CIERRE_PAR AP_BLOQUE Ss RETURN E PUNTOCOMA CIERRE_BLOQUE 
            {
              NodoSentencia RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xright;
		List<NodoDv> args = (List<NodoDv>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		Location cuerpoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xleft;
		Location cuerpoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).xright;
		List<NodoSentencia> cuerpo = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		Location retxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location retxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion ret = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 RESULT = Nodos.nodoDecFunc(tipoxleft, id, args, cuerpo, tipo, ret); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Df",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArgsD ::= ArgsD2 
            {
              List<NodoDv> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		List<NodoDv> args = (List<NodoDv>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = args; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArgsD",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ArgsD ::= 
            {
              List<NodoDv> RESULT =null;
		 RESULT = Collections.emptyList(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArgsD",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArgsD2 ::= ArgsD2 COMA ArgD 
            {
              List<NodoDv> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		List<NodoDv> args = (List<NodoDv>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoDv arg = (NodoDv)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 args.add(arg); RESULT = args; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArgsD2",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArgsD2 ::= ArgD 
            {
              List<NodoDv> RESULT =null;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoDv arg = (NodoDv)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 List<NodoDv> l = new ArrayList<>(); l.add(arg); RESULT = l; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArgsD2",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ArgD ::= T IDEN 
            {
              NodoDv RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoDecParam(tipoxleft, id, tipo); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ArgD",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= IF AP_PAR E CIERRE_PAR THEN AP_BLOQUE Ss CIERRE_BLOQUE 
            {
              NodoSentencia RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xright;
		NodoExpresion cond = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		Location cuerpoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cuerpoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		List<NodoSentencia> cuerpo = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoIf(locxleft, cond, cuerpo); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // C ::= IF AP_PAR E CIERRE_PAR THEN AP_BLOQUE Ss CIERRE_BLOQUE ELSE AP_BLOQUE Ss CIERRE_BLOQUE 
            {
              NodoSentencia RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).xright;
		NodoExpresion cond = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		Location cuerpo1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xleft;
		Location cuerpo1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xright;
		List<NodoSentencia> cuerpo1 = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		Location cuerpo2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cuerpo2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		List<NodoSentencia> cuerpo2 = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoIfElse(locxleft, cond, cuerpo1, cuerpo2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // W ::= WHILE AP_PAR E CIERRE_PAR DO AP_BLOQUE Ss CIERRE_BLOQUE 
            {
              NodoSentencia RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).xright;
		NodoExpresion cond = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		Location cuerpoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location cuerpoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		List<NodoSentencia> cuerpo = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoWhile(locxleft, cond, cuerpo); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("W",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // A ::= V IGUAL E PUNTOCOMA 
            {
              NodoSentencia RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		NodoVariable var = (NodoVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoAsignacion(locxleft, var, exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("A",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F ::= IDEN AP_PAR Args CIERRE_PAR 
            {
              NodoCall RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		List<NodoExpresion> args = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoCall(idxleft, id, args); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Args ::= Args2 
            {
              List<NodoExpresion> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		List<NodoExpresion> args = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = args; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Args",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Args ::= 
            {
              List<NodoExpresion> RESULT =null;
		 RESULT = Collections.emptyList(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Args",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Args2 ::= Args2 COMA Arg 
            {
              List<NodoExpresion> RESULT =null;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		List<NodoExpresion> args = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion arg = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 args.add(arg); RESULT = args; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Args2",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Args2 ::= Arg 
            {
              List<NodoExpresion> RESULT =null;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion arg = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 List<NodoExpresion> l = new ArrayList<>(); l.add(arg); RESULT = l; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Args2",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Arg ::= E 
            {
              NodoExpresion RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Arg",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // T ::= Tp 
            {
              NodoTipo RESULT =null;
		Location tipoPrimitivoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location tipoPrimitivoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoTipo tipoPrimitivo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = tipoPrimitivo; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // T ::= AP_CORCH E CIERRE_CORCH T 
            {
              NodoTipo RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoTipoArray(locxleft, tipo, exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // T ::= AP_CORCH CIERRE_CORCH T 
            {
              NodoTipo RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoTipoArray(locxleft, tipo); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // T ::= PUNT T 
            {
              NodoTipo RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoTipo tipo = (NodoTipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoTipoPuntero(locxleft, tipo); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("T",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tp ::= INT 
            {
              NodoTipo RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoInt(locxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tp",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tp ::= BOOL 
            {
              NodoTipo RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoBool(locxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Tp",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // V ::= IDEN 
            {
              NodoVariable RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoVarUse(idxleft, id); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("V",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // V ::= V AP_CORCH E CIERRE_CORCH 
            {
              NodoVariable RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).xright;
		NodoVariable var = (NodoVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoExpresion exp = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = Nodos.nodoAccesoArray(locxleft, var, exp); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("V",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // V ::= V PUNT 
            {
              NodoVariable RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoVariable var = (NodoVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.NodoAccesoPuntero(locxleft, var); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("V",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Term ::= V 
            {
              NodoExpresion RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoVariable var = (NodoVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoVarExp(varxleft, var); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Term ::= ENT 
            {
              NodoExpresion RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoEnt(nxleft, n); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Term ::= TRUE 
            {
              NodoExpresion RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String loc = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoTrue(locxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Term ::= FALSE 
            {
              NodoExpresion RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		String loc = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoFalse(locxleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Term ::= F 
            {
              NodoExpresion RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoCall func = (NodoCall)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoFuncExp(funcxleft, func); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Term ::= V REF 
            {
              NodoExpresion RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoVariable var = (NodoVariable)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.NodoReferencia(locxleft, var); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E MAS E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoMas(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E MENOS E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoMenos(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E POR E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoPor(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E DIV E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoDiv(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= MENOS E 
            {
              NodoExpresion RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoNeg(locxleft, e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E AND E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoAnd(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E OR E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoOr(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= NOT E 
            {
              NodoExpresion RESULT =null;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoNot(locxleft, e); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E EQU E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoEQ(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E NEQ E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoNEQ(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E GT E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoGT(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E GE E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoGE(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E LT E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoLT(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E LE E 
            {
              NodoExpresion RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).xright;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		Location locxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location locxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = Nodos.nodoLE(locxleft, e1,e2); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= Term 
            {
              NodoExpresion RESULT =null;
		Location termxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xleft;
		Location termxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.peek()).xright;
		NodoExpresion term = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 RESULT = term; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= AP_PAR E CIERRE_PAR 
            {
              NodoExpresion RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).xright;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
